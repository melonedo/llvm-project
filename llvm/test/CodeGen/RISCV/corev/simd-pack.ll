; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 -mtriple=riscv32 -mattr=+m -mattr=+xcvsimd -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

; Extra tests for packhi and packlo

declare i32 @llvm.riscv.cv.simd.packhi.b(i32, i32, i32)

define i32 @test.cv.packhi.b(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: test.cv.packhi.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.packhi.b a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.packhi.b(i32 %a, i32 %b, i32 %c)
  ret i32 %1
}

define i32 @test.cv.packhi.b2(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.packhi.b2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mv a2, a1
; CHECK-NEXT:    mv a1, a0
; CHECK-NEXT:    li a0, 0
; CHECK-NEXT:    cv.packhi.b a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.packhi.b(i32 0, i32 %a, i32 %b)
  ret i32 %1
}

declare i32 @llvm.riscv.cv.simd.packlo.b(i32, i32, i32)

define i32 @test.cv.packlo.b(i32 %a, i32 %b, i32 %c) {
; CHECK-LABEL: test.cv.packlo.b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    cv.packlo.b a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.packlo.b(i32 %a, i32 %b, i32 %c)
  ret i32 %1
}

define i32 @test.cv.packlo.b2(i32 %a, i32 %b) {
; CHECK-LABEL: test.cv.packlo.b2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mv a2, a1
; CHECK-NEXT:    mv a1, a0
; CHECK-NEXT:    li a0, 0
; CHECK-NEXT:    cv.packlo.b a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.packlo.b(i32 0, i32 %a, i32 %b)
  ret i32 %1
}


define i32 @test.cv.packhi.and.packlo(i32 %a, i32 %b, i32 %c, i32 %d) {
; CHECK-LABEL: test.cv.packhi.and.packlo:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mv a4, a2
; CHECK-NEXT:    mv a2, a0
; CHECK-NEXT:    # implicit-def: $x10
; CHECK-NEXT:    cv.packhi.b a0, a3, a4
; CHECK-NEXT:    cv.packlo.b a0, a1, a2
; CHECK-NEXT:    ret
  %1 = call i32 @llvm.riscv.cv.simd.packhi.b(i32 undef, i32 %d, i32 %c)
  %2 = call i32 @llvm.riscv.cv.simd.packlo.b(i32 %1, i32 %b, i32 %a)
  ret i32 %2
}
